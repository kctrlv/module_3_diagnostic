exit
ap params
params
c
raw_stations.count
raw_stations.class
raw_stations = JSON.parse(res.body, symbolize_names: true)[:fuel_stations]
JSON.parse(res.body, symbolize_names: true)[:fuel_stations]
JSON.parse(res.body)['fuel_stations']
JSON.parse(res.body)
JSON.parse(res)['fuel_stations']
res
c
JSON.parse(res.body)['fuel_stations']
JSON.parse(res.body)['fuel_stations'].class
JSON.parse(res.body)['fuel_stations']
JSON.parse(res.body)
JSON.parse(res.body).keys
JSON.parse(res.body).class
JSON.parse(res.body)
res
get_params
params['q']
params
q
y
q
something
params
quit
require q
ap JSON.parse(res.body)
JSON.parse(res.body)
res = conn.get '/api/alt-fuel-stations/v1.json', {fuel_type: "E85,ELEC", state: "CA", api_key: ENV['nrel_api_key']}
conn = Faraday.new(url: 'https://developer.nrel.gov/')
JSON.parse(res.body)
quit
ap
JSON.parse(res.body)
JSON.parse(res)
res
res = conn.get '/api/alt-fuel-stations/v1.json', {fuel_type: "E85,ELEC", state: "CA", api_key: ENV['nrel_api_key']}
res = conn.get '/api/alt-fuel-stations/v1.json'
conn = Faraday.new(url: 'https://developer.nrel.gov/')
Faraday
q
ENV['nrel_api_key']
ENV['nrel_email']
ENV
